# Docker Compose configuration for Fedora Security Hardening Toolkit
# Provides multiple service configurations for different use cases

version: '3.8'

services:
  # Main security toolkit service
  security-toolkit:
    build:
      context: .
      dockerfile: Dockerfile
      target: production
      args:
        BUILD_DATE: ${BUILD_DATE:-}
        VCS_REF: ${VCS_REF:-}
        VERSION: ${VERSION:-1.0.0}
    image: fedora-security-toolkit:latest
    container_name: security-toolkit
    environment:
      - LOG_LEVEL=${LOG_LEVEL:-INFO}
      - AUDIT_OUTPUT_DIR=/app/reports
    volumes:
      - ./reports:/app/reports
      - ./logs:/app/logs
    networks:
      - security-net
    restart: unless-stopped
    command: ["audit", "--verbose"]

  # Development environment
  security-toolkit-dev:
    build:
      context: .
      dockerfile: Dockerfile
      target: development
    image: fedora-security-toolkit:dev
    container_name: security-toolkit-dev
    environment:
      - LOG_LEVEL=DEBUG
      - DEVELOPMENT=1
      - PYTHONPATH=/app
    volumes:
      - .:/app
      - ./reports:/app/reports
      - ./logs:/app/logs
      - dev-cache:/root/.cache
    networks:
      - security-net
    stdin_open: true
    tty: true
    command: ["shell"]

  # Testing service
  security-toolkit-test:
    build:
      context: .
      dockerfile: Dockerfile
      target: testing
    image: fedora-security-toolkit:test
    container_name: security-toolkit-test
    environment:
      - LOG_LEVEL=DEBUG
      - PYTHONPATH=/app
    volumes:
      - .:/app
      - test-cache:/root/.cache
    networks:
      - security-net
    command: ["test"]

  # Security scanning service
  security-scanner:
    build:
      context: .
      dockerfile: Dockerfile
      target: security-scan
    image: fedora-security-toolkit:security-scan
    container_name: security-scanner
    environment:
      - LOG_LEVEL=INFO
    volumes:
      - .:/app
      - ./reports:/app/reports
    networks:
      - security-net
    command: ["lint"]

  # Continuous audit service
  audit-scheduler:
    image: fedora-security-toolkit:latest
    container_name: audit-scheduler
    environment:
      - LOG_LEVEL=INFO
      - AUDIT_OUTPUT_DIR=/app/reports
      - AUDIT_INTERVAL=${AUDIT_INTERVAL:-3600}  # 1 hour default
    volumes:
      - ./reports:/app/reports
      - ./logs:/app/logs
      - /etc:/host/etc:ro
    networks:
      - security-net
    restart: unless-stopped
    command: >
      bash -c "
        while true; do
          echo 'Running scheduled security audit...'
          python security_audit.py --verbose
          echo 'Audit complete. Sleeping for $$AUDIT_INTERVAL seconds...'
          sleep $$AUDIT_INTERVAL
        done
      "

  # Web dashboard (future enhancement)
  security-dashboard:
    image: nginx:alpine
    container_name: security-dashboard
    ports:
      - "${DASHBOARD_PORT:-8080}:80"
    volumes:
      - ./reports:/usr/share/nginx/html/reports:ro
      - ./dashboard/nginx.conf:/etc/nginx/nginx.conf:ro
      - ./dashboard/html:/usr/share/nginx/html:ro
    networks:
      - security-net
    restart: unless-stopped
    depends_on:
      - security-toolkit

  # Log aggregator
  log-aggregator:
    image: fluent/fluent-bit:latest
    container_name: log-aggregator
    volumes:
      - ./logs:/var/log/security:ro
      - ./fluent-bit.conf:/fluent-bit/etc/fluent-bit.conf:ro
    networks:
      - security-net
    restart: unless-stopped
    depends_on:
      - security-toolkit

networks:
  security-net:
    driver: bridge
    name: security-toolkit-network

volumes:
  dev-cache:
    name: security-toolkit-dev-cache
  test-cache:
    name: security-toolkit-test-cache

# Override configurations for different environments
# Use with: docker-compose -f docker-compose.yml -f docker-compose.override.yml up
