# Tox configuration for Fedora Security Hardening Toolkit
# Advanced testing across multiple Python versions and environments

[tox]
envlist = 
    py{38,39,310,311,312}
    lint
    security
    docs
    type-check
    coverage
    integration
minversion = 4.0.0
isolated_build = true

[gh-actions]
# GitHub Actions integration
python =
    3.8: py38
    3.9: py39
    3.10: py310
    3.11: py311
    3.12: py312

[testenv]
# Base test environment
deps = -r requirements-test.txt
commands = 
    pytest {posargs:tests/} -v --tb=short
setenv =
    PYTHONPATH = {toxinidir}
    COVERAGE_FILE = {toxworkdir}/.coverage.{envname}
passenv = 
    CI
    GITHUB_*
    CODECOV_*

[testenv:lint]
# Code linting and formatting
deps = -r requirements-dev.txt
commands =
    black --check --diff .
    isort --check-only --diff .
    flake8 .
    pylint security_audit.py
    shellcheck security_hardening.sh security_validation.sh

[testenv:security]
# Security scanning
deps = -r requirements-dev.txt
commands =
    bandit -r . -f json -o {toxworkdir}/bandit-report.json
    bandit -r . --severity-level medium
    safety check --json --output {toxworkdir}/safety-report.json
    safety check

[testenv:type-check]
# Type checking with mypy
deps = -r requirements-dev.txt
commands =
    mypy security_audit.py --strict --show-error-codes

[testenv:docs]
# Documentation building and validation
deps = -r requirements-dev.txt
commands =
    sphinx-build -W -b html docs docs/_build/html
    sphinx-build -W -b linkcheck docs docs/_build/linkcheck

[testenv:coverage]
# Coverage reporting
deps = -r requirements-test.txt
commands =
    pytest --cov=. --cov-report=html --cov-report=xml --cov-report=term
    coverage report --fail-under=80

[testenv:integration]
# Integration testing
deps = -r requirements-test.txt
commands =
    pytest tests/integration/ -v --tb=long
setenv =
    {[testenv]setenv}
    INTEGRATION_TESTS = 1

[testenv:performance]
# Performance testing
deps = -r requirements-test.txt
commands =
    pytest tests/performance/ --benchmark-only --benchmark-sort=mean

[testenv:mutation]
# Mutation testing
deps = 
    -r requirements-test.txt
    mutmut>=2.4.0
commands =
    mutmut run --paths-to-mutate=security_audit.py

[testenv:clean]
# Clean up generated files
deps =
commands = 
    python -c "import shutil; shutil.rmtree('build', ignore_errors=True)"
    python -c "import shutil; shutil.rmtree('dist', ignore_errors=True)"
    python -c "import shutil; shutil.rmtree('.pytest_cache', ignore_errors=True)"
    python -c "import shutil; shutil.rmtree('htmlcov', ignore_errors=True)"
    python -c "import shutil; shutil.rmtree('.coverage*', ignore_errors=True)"
    python -c "import shutil; shutil.rmtree('.mypy_cache', ignore_errors=True)"
    python -c "import shutil; shutil.rmtree('__pycache__', ignore_errors=True)"

[testenv:build]
# Build distribution packages
deps = 
    build>=0.10.0
    twine>=4.0.0
commands =
    python -m build
    twine check dist/*

[testenv:release]
# Release preparation
deps = 
    -r requirements-dev.txt
    build>=0.10.0
    twine>=4.0.0
commands =
    python -m build
    twine check dist/*
    # twine upload dist/* --repository testpypi

[flake8]
# Flake8 configuration
max-line-length = 100
extend-ignore = E203,W503,E501
exclude = 
    .git,
    __pycache__,
    build,
    dist,
    .tox,
    .eggs,
    *.egg-info
per-file-ignores = tests/*:S101,S106
max-complexity = 10
select = E,W,F,C,N,B,S
application-import-names = fedora_security_toolkit
import-order-style = google

[coverage:run]
# Coverage configuration
source = .
omit = 
    tests/*
    setup.py
    .tox/*
    build/*
    dist/*
    __pycache__/*
    *.egg-info/*
branch = true
parallel = true

[coverage:report]
# Coverage reporting
exclude_lines =
    pragma: no cover
    def __repr__
    raise AssertionError
    raise NotImplementedError
    if __name__ == .__main__.:
    if TYPE_CHECKING:
show_missing = true
skip_covered = false
fail_under = 80

[coverage:html]
directory = htmlcov

[coverage:xml]
output = coverage.xml
